diff --git a/src/routes/+layout.server.ts b/src/routes/+layout.server.ts
index 9c6cc9b..6fc275f 100644
--- a/src/routes/+layout.server.ts
+++ b/src/routes/+layout.server.ts
@@ -1,7 +1,5 @@
-import { getUser } from 'currentUser';
-
-export const load = async ({ cookies, url }) => {
-        const user = await getUser(cookies, url.pathname);
-        if (user) return { user: user.get() };
+export const load = ({ locals }) => {
+        const user = locals.user;
+        return { user };
 }
 
diff --git a/src/routes/+layout.svelte b/src/routes/+layout.svelte
index e9eb1fe..6ce74d2 100644
--- a/src/routes/+layout.svelte
+++ b/src/routes/+layout.svelte
@@ -1,13 +1,13 @@
 <script lang="ts">
 	import { globalStore } from 'store';
 	import Navigation from 'components/navigation/index.svelte';
-	import Header from './Header.svelte';
 	import '../app.css';
 
 	let { children, data } = $props();
 
 	// set logged in user
-	globalStore.user = data.user;
+        if (!globalStore.user)
+                globalStore.user = data.user;
 </script>
 
 <div class="col h-full">
@@ -17,3 +17,4 @@
 		{@render children()}
 	</main>
 </div>
+
diff --git a/src/routes/+page.server.ts b/src/routes/+page.server.ts
index 9703c86..c9b1754 100644
--- a/src/routes/+page.server.ts
+++ b/src/routes/+page.server.ts
@@ -1,9 +1,11 @@
-import { getUser } from 'currentUser';
+import { redirect } from '@sveltejs/kit';
 import { Question } from 'models';
 import { Op } from 'sequelize';
 
-export const load = async ({ cookies, url }) => {
-        const user = await getUser(cookies, url.pathname);
+export const load = async ({ locals }) => {
+        const user = locals.user;
+        if (!user) throw redirect(302, '/login');
+
         // get all difficulties
         const difficulties = await Question.findAll({
                 group: 'difficulty',
diff --git a/src/routes/login/+page.server.ts b/src/routes/login/+page.server.ts
index 61bc147..6d6ac4a 100644
--- a/src/routes/login/+page.server.ts
+++ b/src/routes/login/+page.server.ts
@@ -1,52 +1,59 @@
 import type { Actions, PageServerLoad } from './$types';
-import { fail } from '@sveltejs/kit';
+import { fail, redirect } from '@sveltejs/kit';
 import bcrypt from 'bcryptjs';
 import { User } from 'models';
-import { isSignedIn } from 'currentUser';
 import { createSession, generateSessionToken } from 'utils/session';
 
-export const load: PageServerLoad = async ({ cookies }) => {
-        const token = cookies.get('session');
-        return await isSignedIn(token, '/login');
-}
+export const load: PageServerLoad = async ({ locals }) => {
+        console.log('[load: /login] logging in...')
+        const user = locals.user;
+        if (user) {
+                console.log('[load: /login] user found, redirecting to /')
+                throw redirect(302, '/');
+        }
+};
 
 export const actions: Actions = {
         default: async ({ request, cookies }) => {
+                console.log('[action: /login] logging in...')
                 const form = await request.formData();
-                const email = form.get('username');
+                const email = form.get('email');
                 const password = form.get('password') as string;
 
                 if (!email || !password) {
                         return fail(400, { error: 'Missing email or password.' });
                 }
 
-                const user = await User.findOne({
-                        where: { email },
-                });
+                const user = await User.findOne({ where: { email } });
 
                 if (!user) {
+                        console.log('[action: /login] user not found')
                         return fail(400, { error: 'Invalid email or password.' });
                 }
 
-                const validPassword = await bcrypt.compare(password, user.getDataValue('password'));
+                const validPassword = bcrypt.compare(password, user.get('password'));
+
                 if (!validPassword) {
+                        console.log('[action: /login] invalid password')
                         return fail(400, { error: 'Invalid email or password.' });
                 }
 
                 const token = generateSessionToken();
-                await createSession(token, user.getDataValue('id'));
+                console.log('[action: /login] session token:', token)
+                await createSession(token, user.get('id'));
 
                 cookies.set('session', token, {
                         path: '/',
                         httpOnly: true,
                         sameSite: 'strict',
                         secure: process.env.NODE_ENV === 'production',
-                        maxAge: 60 * 60 * 24 * 30
+                        maxAge: 60 * 60 * 24 * 30 // 30 days
                 });
 
-                const userData = user.dataValues;
+                const userData = user.get();
                 delete userData.password;
-                return userData;
+
+                return { user: userData };
         }
 };
 
diff --git a/src/routes/login/+page.svelte b/src/routes/login/+page.svelte
index 73dad93..c25d16a 100644
--- a/src/routes/login/+page.svelte
+++ b/src/routes/login/+page.svelte
@@ -3,7 +3,7 @@
 	import { globalStore } from 'store';
 	import { goto } from '$app/navigation';
 
-	let username = $state('');
+	let email = $state('');
 	let password = $state('');
 	let showPassword = $state(false);
 
@@ -19,17 +19,18 @@
 				loading = false;
 				return;
 			}
-			globalStore.user = result.data;
+                        update();
 
-			update();
+			globalStore.user = result.data.user;
 			loading = false;
+
 			goto('/');
 		};
 	};
 </script>
 
 <AuthForm {error} {loading} handler={handleLogin} route="/login">
-	<input type="email" bind:value={username} name="username" placeholder="Email" required />
+	<input type="email" bind:value={email} name="email" placeholder="Email" required />
 	<PasswordInput
 		label="Enter password"
 		name="password"
@@ -38,3 +39,4 @@
 		value={password}
 	/>
 </AuthForm>
+
diff --git a/src/routes/play/+page.server.ts b/src/routes/play/+page.server.ts
index a25ea7f..cce5949 100644
--- a/src/routes/play/+page.server.ts
+++ b/src/routes/play/+page.server.ts
@@ -1,10 +1,7 @@
-import { getUser, getUserByName } from 'currentUser';
-import { CategoryStat, Question, User, UserStats } from 'models';
+import { CategoryStat, Question, UserStats } from 'models';
 import { fn, Op } from 'sequelize';
-import type { Actions } from './$types';
-import { fail } from '@sveltejs/kit';
-
-// TODO: Add session validation for all form actions
+import type { Actions, PageServerLoad } from './$types';
+import { fail, redirect } from '@sveltejs/kit';
 
 const filterQuestions = async (url, userAnswered) => {
         const categories = (url.searchParams.get('categories') || 'All Categories').split(',');
@@ -32,28 +29,29 @@ const filterQuestions = async (url, userAnswered) => {
         return { questions, total: allQuestions.count };
 };
 
-export const load = async ({ cookies, url }) => {
-        const user = await getUser(cookies, url.pathname);
+export const load: PageServerLoad = async ({ url, locals }) => {
+        const user = locals.user;
+        if (!user) throw redirect(302, '/login');
         const userAnswered = user?.get('answeredQuestions');
         return filterQuestions(url, userAnswered);
 }
 
 export const actions = {
-        paginate: async ({ request }) => {
+        paginate: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
+
                 const form = await request.formData();
 
-                const username = form.get('username')?.toString();
                 const difficulty = form.get('difficulty')?.toString();
                 const categories = form.get('categories')?.toString();
                 const _totalCorrect = form.get('totalCorrect')?.toString() || '0';
                 const _stats = form.get('stats')?.toString();
                 const _answeredQuestions = form.get('answeredQuestions')?.toString();
 
-                if (!username) return fail(400, { error: 'Username missing' });
                 if (!_stats) return fail(400, { error: 'User stats missing' });
                 if (!_answeredQuestions) return fail(400, { error: 'Answered questions id list missing' });
 
-                const user = await getUserByName(username);
                 const stats = JSON.parse(_stats);
                 const answeredQuestions = JSON.parse(_answeredQuestions);
                 const totalCorrect = parseInt(_totalCorrect);
diff --git a/src/routes/play/+page.svelte b/src/routes/play/+page.svelte
index 78a6416..34c6c4d 100644
--- a/src/routes/play/+page.svelte
+++ b/src/routes/play/+page.svelte
@@ -2,17 +2,20 @@
 	import { playStore, questionStore, globalStore } from 'store';
 	import Question from './components/question.svelte';
 	import { page } from '$app/state';
+        import { Button } from 'components';
 
 	globalStore.categories = (page.url.searchParams.get('categories') || 'All Categories').split(',');
 	globalStore.difficulty = page.url.searchParams.get('difficulty') || 'all difficulties';
 
 	let { data } = $props();
+        let ready = $state(false);
+
 	playStore.questions = data.questions;
 	playStore.totalQuestions = data.total;
 	questionStore.timers = Array.from(data.questions, (_, i) => ({
-		state: !i ? 'started' : '',
+		state: '',
 		userAnswer: '',
-		timer: null
+		timer: null,
 	}));
 </script>
 
@@ -37,14 +40,37 @@
 		</div>
 	</div>
 {:else}
-	<div class="col items-center gap-4 p-4">
-		<h2 class="text-xl font-bold">
-			Question {playStore.globalIndex} of {data.total}
-		</h2>
-		{#each playStore.questions as question, index}
-			{#if index === playStore.questionIndex}
-				<Question {question} {index} />
-			{/if}
-		{/each}
-	</div>
+        {#if ready}
+                <div class="col items-center gap-4 p-4">
+                        <h2 class="text-xl font-bold">
+                                Question {playStore.globalIndex} of {data.total}
+                        </h2>
+                        {#each playStore.questions as question, index}
+                                {#if index === playStore.questionIndex}
+                                        <Question {question} {index} />
+                                {/if}
+                        {/each}
+                </div>
+        {:else}
+                <div class="w-full h-full col justify-center items-center gap-2">
+                        <p>Difficulty: {globalStore.difficulty}</p>
+                        <p>Categories: {globalStore.categories.join(', ')}</p>
+
+                        <div class="flex gap-4 justify-between mt-2">
+                                <Button
+                                        onclick={() => {
+                                                ready = true;
+                                                questionStore.timers[0].state = 'started';
+                                        }}
+                                        play
+                                >
+                                        Start playing
+                                </Button>
+                                <a href="/">
+                                        <Button>Change filters</Button>
+                                </a>
+                        </div>
+                </div>
+        {/if}
 {/if}
+
diff --git a/src/routes/settings/+page.server.ts b/src/routes/settings/+page.server.ts
index ca03510..fabad5d 100644
--- a/src/routes/settings/+page.server.ts
+++ b/src/routes/settings/+page.server.ts
@@ -2,44 +2,46 @@ import bcrypt from 'bcryptjs';
 import fs from 'fs/promises';
 import path from 'path';
 import { fail, redirect } from '@sveltejs/kit';
-import type { Actions } from './$types';
+import type { Actions, PageServerLoad } from './$types';
 import { User, Session } from 'models';
 import { encodeHexLowerCase } from '@oslojs/encoding';
 import { sha256 } from '@oslojs/crypto/sha2';
 import { randomUUID } from 'crypto';
 import { unlink } from 'fs/promises';
-import { getUserByName } from 'currentUser';
 
-export const actions: Actions = {
-        setDefaultAvatar: async ({ request }) => {
-                const formData = await request.formData();
-                const username = formData.get('username')?.toString();
-                const defaultPath = '/images/icons8-user-64.png';
+export const load: PageServerLoad = ({ locals }) => {
+        const user = locals.user;
+        if (!user) throw redirect(302, '/login');
+}
 
-                if (!username) return fail(400, { error: 'Missing username' });
+export const actions: Actions = {
+        setDefaultAvatar: async ({ locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login')
 
-                const user = await getUserByName(username);
+                const defaultPath = '/images/icons8-user-64.png';
 
-                if (user.getDataValue('avatar') === defaultPath) return user.dataValues;
+                if (user.get('avatar') === defaultPath)
+                        return { message: "Avatar unchanged", user: user.get() };
 
                 // remove prev avatar
                 try {
-                        await unlink('static' + user.getDataValue('avatar'));
+                        await unlink('static' + user.get('avatar'));
                 } catch { ; }
 
                 user.setDataValue('avatar', defaultPath);
                 await user.save()
 
-                return { message: "Avatar updated", user: user.dataValues };
+                return { message: "Avatar updated", user: user.get() };
         },
-        changeAvatar: async ({ request }) => {
+        changeAvatar: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
+
                 const formData = await request.formData();
                 const avatar = formData.get('avatar')
-                const username = formData.get('username')?.toString();
                 const defaultPath = '/images/icons8-user-64.png';
 
-                if (!username) return fail(400, { error: 'Missing username' });
-
                 if (!avatar) return fail(400, { error: 'Missing avatar' });
 
                 // generate image buffer
@@ -48,17 +50,14 @@ export const actions: Actions = {
 
                 if (!isImageBuffer(buffer)) return fail(400, { error: 'Upload images only' });
 
-                // check for valid user
-                const user = await getUserByName(username);
-
                 // generate file name
                 const basePath = '/images/uploads/';
                 const extension = avatar.name.split('.').at(-1);
-                const filename = `${user.dataValues.username}_${randomUUID()}.${extension}`;
+                const filename = `${user.get.username}_${randomUUID()}.${extension}`;
 
                 // remove prev avatar
-                if (user.getDataValue('avatar') !== defaultPath)
-                        await unlink('static' + user.getDataValue('avatar'));
+                if (user.get('avatar') !== defaultPath)
+                        await unlink('static' + user.get('avatar'));
 
                 // save image to disc
                 const filePath = path.resolve('static' + basePath, filename)
@@ -68,39 +67,35 @@ export const actions: Actions = {
                 user.setDataValue('avatar', basePath + filename);
                 await user.save();
 
-                return { message: "Avatar updated", user: user.dataValues };
+                return { message: "Avatar updated", user: user.get };
         },
-        changeUsername: async ({ request }) => {
+        changeUsername: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
+
                 const formData = await request.formData();
                 const newUsername = formData.get('newUsername')?.toString();
-                const username = formData.get('username')?.toString();
-
-                if (!username) return fail(400, { error: 'Missing username' });
 
                 if (!newUsername) return fail(400, { error: 'Missing new display name' });
 
-                const user = await getUserByName(username);
-
                 user.setDataValue('username', newUsername);
                 await user.save();
                 return {
                         message: "Display name changed",
-                        user: user.dataValues,
+                        user: user.get(),
                 };
         },
-        changePassword: async ({ request }) => {
+        changePassword: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
+
                 const formData = await request.formData();
                 const newPassword = formData.get('newPassword')?.toString();
                 const currentPassword = formData.get('currentPassword')?.toString();
-                const username = formData.get('username')?.toString();
-
-                if (!username) return fail(400, { error: 'Missing username' });
 
                 if (!newPassword || !currentPassword) return fail(400, { error: 'Missing password' });
 
-                const user = await getUserByName(username, true);
-
-                const validPassword = await bcrypt.compare(currentPassword, user.getDataValue('password'));
+                const validPassword = await bcrypt.compare(currentPassword, user.get('password'));
                 if (!validPassword) {
                         return fail(400, { error: 'Invalid password.' });
                 }
@@ -109,7 +104,7 @@ export const actions: Actions = {
 
                 user.setDataValue('password', hashedPassword);
                 await user.save();
-                const userData = user.dataValues;
+                const userData = user.get();
                 delete userData.password;
 
                 return { user: userData, message: 'Password updated' }
@@ -122,14 +117,12 @@ export const actions: Actions = {
                 cookies.delete('session', { path: '/' });
                 return { user: null, redirectTo: '/login', message: 'Logged out' };
         },
-        deleteAccount: async ({ request }) => {
-                const formData = await request.formData();
-                const username = formData.get('username')?.toString();
-
-                if (!username) return fail(400, { error: 'Missing username' });
+        deleteAccount: async ({ locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
 
                 await User.destroy({
-                        where: { username },
+                        where: { username: user.get('username') },
                 });
                 return { user: null, redirectTo: '/signup', message: 'Account deleted' };
         },
diff --git a/src/routes/signup/+page.server.ts b/src/routes/signup/+page.server.ts
index 7342088..1b8b51f 100644
--- a/src/routes/signup/+page.server.ts
+++ b/src/routes/signup/+page.server.ts
@@ -1,15 +1,14 @@
 import type { Actions, PageServerLoad } from './$types';
 import { redirect, fail } from '@sveltejs/kit';
 import bcrypt from 'bcryptjs';
-import { isSignedIn } from 'currentUser';
 import { User } from 'models';
 import { sendEmail } from 'utils/emailVerification';
 import { createSession, generateSessionToken } from 'utils/session';
 
-export const load: PageServerLoad = async ({ cookies }) => {
-        const token = cookies.get('session');
-        return isSignedIn(token, '/signup');
-}
+export const load = ({ locals }) => {
+        const user = locals.user;
+        if (user) throw redirect(302, '/');
+};
 
 export const actions: Actions = {
         default: async ({ request, cookies }) => {
@@ -43,7 +42,7 @@ export const actions: Actions = {
 
                 // sign user in
                 const token = generateSessionToken();
-                createSession(token, newUser.getDataValue("id"));
+                createSession(token, newUser.get("id"));
 
                 cookies.set('session', token, {
                         path: '/',
@@ -59,7 +58,7 @@ export const actions: Actions = {
 
                 const validateEmailUri = `/signup/validate-email?email=${email}`;
 
-                const userData = newUser.dataValues;
+                const userData = newUser.get();
                 delete userData.password;
 
                 return { user: userData, redirectTo: validateEmailUri, message: 'Account created' };
diff --git a/src/routes/signup/+page.svelte b/src/routes/signup/+page.svelte
index 9d57653..2b19c0a 100644
--- a/src/routes/signup/+page.svelte
+++ b/src/routes/signup/+page.svelte
@@ -13,12 +13,14 @@
 	const handleSignup = async () => {
 		loading = true;
 
-		return async ({ result }) => {
+		return async ({ result, update }) => {
 			if (result.type === 'failure') {
 				error = result.data.error;
 				loading = false;
 				return;
-			}
+                        }
+                        update();
+
 			globalStore.user = result.data.user;
 
 			loading = false;
@@ -38,3 +40,4 @@
 		value={password}
 	/>
 </AuthForm>
+
diff --git a/src/routes/signup/validate-email/+page.server.ts b/src/routes/signup/validate-email/+page.server.ts
index 880443c..a3fe1e5 100644
--- a/src/routes/signup/validate-email/+page.server.ts
+++ b/src/routes/signup/validate-email/+page.server.ts
@@ -1,75 +1,68 @@
 import { redirect, fail } from '@sveltejs/kit';
-import { getUserByName } from 'currentUser';
 import { User } from 'models';
 import { sendEmail, validateEmailVerificationCode } from 'utils/emailVerification';
 
-export const load = async ({ url }) => {
+export const load = async ({ url, locals }) => {
+        const sessionUser = locals.user;
+        if (!sessionUser) throw redirect(302, '/login');
+
         const email = url.searchParams.get('email');
         const user = await User.findOne({
                 where: { email }
         });
 
         if (!user) throw redirect(302, '/login');
-        if (user.getDataValue('isVerified')) throw redirect(302, '/');
+        if (user.get('isVerified')) throw redirect(302, '/');
         return { email }
 }
 
 export const actions = {
-        verifyCode: async ({ request }) => {
+        verifyCode: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) redirect(302, '/login');
+
                 const formData = await request.formData();
                 const code = formData.get('code')?.toString();
-                const email = formData.get('email')?.toString();
-                const username = formData.get('username')?.toString();
 
-                if (!username) return fail(400, { error: 'Missing username' });
                 if (!code) return fail(400, { error: 'Missing verification code' });
 
-                const { success, message } = await validateEmailVerificationCode(email, code);
+                const { success, message } = await validateEmailVerificationCode(user.get('email'), code);
 
                 if (success) {
-                        const user = await getUserByName(username);
                         user.setDataValue('isVerified', true);
                         await user.save();
                         return {
                                 message: 'Email verified',
-                                user: user.dataValues,
+                                user: user.get(),
                                 redirectTo: '/',
                         };
                 }
                 else return fail(400, { error: message })
         },
-        resendCode: async ({ request }) => {
-                const formData = await request.formData();
-                const email = formData.get('email')?.toString();
-                const user = await User.findOne({
-                        where: { email },
-                        attributes: {
-                                exclude: ['password'],
-                        }
-                });
+        resendCode: async ({ locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
 
-                if (!user) throw redirect(302, '/signup');
-
-                const { status, data } = await sendEmail({ username: user.getDataValue('username'), email })
+                const { status, data } = await sendEmail({ username: user.get('username'), email: user.get('email') })
                 if (status === 'fail') return fail(400, { error: data })
-                return { user: user.dataValues, message: 'New code sent' };
+                return { user: user.get(), message: 'New code sent' };
         },
-        changeEmail: async ({ request }) => {
+        changeEmail: async ({ request, locals }) => {
+                const user = locals.user;
+                if (!user) throw redirect(302, '/login');
+
                 const formData = await request.formData();
-                const username = formData.get('username')?.toString();
                 const newEmail = formData.get('newEmail')?.toString();
 
                 if (!newEmail) return fail(400, { error: 'Missing new email' });
-                if (!username) return fail(400, { error: 'Missing username' });
 
                 const validateEmailUri = `/signup/validate-email?email=${newEmail}`;
 
-                const user = await getUserByName(username);
                 user.setDataValue('email', newEmail);
                 await user.save();
                 return {
                         message: 'Email updated',
-                        user: user.dataValues,
+                        user: user.get(),
                         redirectTo: validateEmailUri,
                         newEmail,
                 };
diff --git a/src/routes/signup/validate-email/+page.svelte b/src/routes/signup/validate-email/+page.svelte
index 9f295a0..cff27da 100644
--- a/src/routes/signup/validate-email/+page.svelte
+++ b/src/routes/signup/validate-email/+page.svelte
@@ -64,8 +64,6 @@
 			use:enhance={() => handleUserAction('verify', verifyingEmail)}
 			method="POST"
 		>
-			<input type="hidden" bind:value={globalStore.user.username} name="username" />
-			<input type="hidden" bind:value={email} name="email" />
 			<VerificationCodeInput error={verifyingEmail.error} />
 			<Button primary disabled={loading}>
 				Send
@@ -85,7 +83,6 @@
 			action="?/resendCode"
 			method="POST"
 		>
-			<input type="hidden" bind:value={email} name="email" />
 			{#if resendingEmail.loading}
 				<div class="flex items-center gap-2">
 					Requesting new code
@@ -119,7 +116,6 @@
 						bind:value={newEmail}
 						name="newEmail"
 					/>
-					<input type="hidden" bind:value={globalStore.user.username} name="username" />
 					<Button disabled={loading}>
 						Change
 						{#if updatingEmail.loading}
@@ -139,3 +135,4 @@
 		}
 	}
 </style>
+
diff --git a/src/routes/stats/+page.server.ts b/src/routes/stats/+page.server.ts
index 08ff4f1..bdf7d5c 100644
--- a/src/routes/stats/+page.server.ts
+++ b/src/routes/stats/+page.server.ts
@@ -1,11 +1,13 @@
-import { getUser } from 'currentUser';
+import { redirect } from '@sveltejs/kit';
 import { CategoryStat, User, UserStats } from 'models';
 
-export const load = async ({ cookies }) => {
-        const user = await getUser(cookies, '/stats');
+export const load = async ({ locals }) => {
+        const user = locals.user;
+        if (!user) throw redirect(302, '/login');
+
         const userStats = await UserStats.findOne({
                 where: {
-                        UserId: user?.get('id'),
+                        UserId: user.get('id'),
                 }
         });
 
